public class DisjointUnionSets {
    private int[] parent, rank;
    private int n;

    public DisjointUnionSets(int n) {
        this.parent = new int[n];
        this.rank = new int[n];
        this.n = n;
        this.defaultSet();
    }

    private void defaultSet() {
        for (int i = 0; i < this.n; i++) {
            this.parent[i] = i;
        }
    }

    public int find(int i) {
        return parent[i] == i ? i : find(parent[i]);
    }

    public void union(int x, int y) {
        int xParent = find(x);
        int yParent = find(y);

        if (rank[xParent] > rank[yParent]) {
            parent[yParent] = xParent;
        } else if (rank[yParent] > rank[xParent]) {
            parent[xParent] = yParent;
        } else {
            parent[xParent] = yParent;
            rank[yParent] += 1;
        }
    }

    public static void main(String[] args) {
        int n = 5;
        DisjointUnionSets dus =
                new DisjointUnionSets(n);

        // 0 is a friend of 2
        dus.union(0, 2);

        // 4 is a friend of 2
        dus.union(4, 2);

        // 3 is a friend of 1
        dus.union(3, 1);

        // Check if 4 is a friend of 0
        if (dus.find(4) == dus.find(0))
            System.out.println("Yes");
        else
            System.out.println("No");

        // Check if 1 is a friend of 0
        if (dus.find(1) == dus.find(0))
            System.out.println("Yes");
        else
            System.out.println("No");
    }
}
